<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<id>task</id>
	<initials>úloha</initials>
	<title>Uloha</title>
	<defaultRole>true</defaultRole>
	<transitionRole>false</transitionRole>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<!-- DATA -->
	<data type="user">
		<id>creator</id>
		<title>Zadávateľ</title>
	</data>
	<data type="user">
		<id>assignee</id>
		<title>Riešiteľ</title>
		<action trigger="set">
			user: f.this,
			status: f.status;
			
			if(user.value == null){
				change status value{
					"Nepridelená"
				}
			}
			else {
				change status value{
					"Pridelená"
				}
			}
		</action>
	</data>
	<data type="text">
		<id>task</id>
		<title>Úloha</title>
	</data>
	<data type="user">
		<id>closed_by</id>
		<title>Uzavrel</title>
	</data>
	<data type="text">
		<id>desc</id>
		<title>Popis stavu</title>
	</data>
	<data type="enumeration">
		<id>closure_state</id>
		<title>Stav uzavretia</title>
		<values>Vyriešená</values>
		<values>Nevyriešená</values>
		<values>Rieši sa v servisnom zázname</values>
	</data>
	<data type="date">
		<id>creation_date</id>
		<title>Dátum vytvorenia</title>
	</data>
	<data type="date">
		<id>close_date</id>
		<title>Dátum uzavretia</title>
	</data>
	<data type="date">
		<id>change_date</id>
		<title>Dátum poslednej zmeny</title>
	</data>
	<data type="date">
		<id>shedule_date</id>
		<title>Dátum naplánovania</title>
	</data>
	<data type="text">
		<id>title</id>
		<title>Nadpis</title>
	</data>
	<data type="text">
		<id>status</id>
		<title>Stav</title>
		<action trigger="set">
			status: f.this,
			history: f.status_history;
			
			def currentDateTime = java.time.LocalDateTime.now()
			def formatter = java.time.format.DateTimeFormatter.ofPattern("dd.MM.YYYY HH:mm")
			def formatedDateTime = currentDateTime.format(formatter)
			def surname = userService.getLoggedOrSystem().surname
						
			change history choices {
				history.choices + [formatedDateTime + " -- " + status.value + " (${surname})"]
			}			
			
			def title = useCase.title
			def torn = title.split("\\{", 0)
			
			changeCaseProperty "title" about {
				torn[0] + " {${status.value}}"
			}
		</action>
	</data>
	<data type="text">
		<id>accept_removal</id>
		<title>Vymazanie treba potvrdiť</title>
	</data>
	<data type="enumeration">
		<id>status_history</id>
		<title>História stavov</title>
	</data>
	<data type="taskRef">
		<id>service_creation</id>
		<title>Vytvorenie servisného záznamu</title>
	</data>
	<data type="enumeration_map">
		<id>car_list</id>
		<title>Zoznam áut</title>
	</data>
	<data type="text">
		<id>last_car_select</id>
		<title>ID posledne vybraného auta</title>
	</data>
	<data type="boolean">
		<id>delete_service</id>
		<title>Vymazať aj servisný záznam?</title>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>2</id>
		<x>540</x>
		<y>300</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vytvorenie úlohy</label>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>2</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>shedule_date</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>4</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>assignee</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>5</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>2_assign</id>
			<actions phase="pre">
				<action>
					uzer: f.creator;

					def disUser = userService.getLoggedOrSystem();					
					//todo: how to load logged user into f.creator?
					//change uzer value {
					//	disUser
					//}				
					
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>2_finish</id>
			<actions phase="post">
				<action>
					status: f.status,
					user: f.assignee,
					title: f.title,
					creationDate: f.creation_date;

					
					if(user.value == null){
						change status value{
							"Nepridelená"
						}
					}
					else {
						change status value{
							"Pridelená"
						}
					}
					
					changeCaseProperty "title" about {
						title.value + " {}"
					}

					change creationDate value {
						java.time.LocalDate.now()
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>8</id>
		<x>460</x>
		<y>100</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zobrazenie informácií</label>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>closure_state</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>7</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>change_date</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>5</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>2</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>creator</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>creation_date</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>shedule_date</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>4</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>closed_by</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>9</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>close_date</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>9</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>status</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>7</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>status_history</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>7</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>assignee</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>5</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>desc</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>8</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>9</id>
		<x>700</x>
		<y>180</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Upravenie informácií</label>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>2</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>shedule_date</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>3</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>assignee</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>4</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>9_finish</id>
			<actions phase="post">
				<action>				
					changeDate: f.change_date;
					
					change changeDate value {
						java.time.LocalDate.now()
					}									
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>10</id>
		<x>620</x>
		<y>100</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vymazanie úlohy</label>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>accept_removal</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>delete_service</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="get">
						dis: f.this;
						
						change dis value {
							false
						}
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>10_assign</id>
			<actions phase="pre">
				<action>				
					deleteService: f.delete_service,
					thisTask: t.10;
					
					def serviceCase = findCase( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_service").and(it.dataSet.get("parent_task_id").value?.eq(useCase.stringId))} ) 
					
					if(serviceCase == null){
						make deleteService, visible on thisTask when { true }
					} else {
						make deleteService, editable on thisTask when { true }
					}									
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>10_finish</id>
			<actions phase="post">
				<action>		
					deleteService: f.delete_service;
					
					if(deleteService.value){
						def toRemoveService = findCase( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_service").and(it.dataSet.get("parent_task_id").value?.eq(useCase.stringId))} )
						
						if(toRemoveService != null){
							def removeTrans = findTask( {it.caseId.eq(toRemoveService.stringId).and(it.transitionId.eq("12"))} )
							if(removeTrans != null){
								assignTask(removeTrans)
								finishTask(removeTrans)
							}
						}						
					}
				
					def toRemove = findCase( { it._id.eq(useCase._id) } );
			
					if(toRemove != null){
						async.run{
							workflowService.deleteCase(toRemove._id.toString());
						}
					}									
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>17</id>
		<x>860</x>
		<y>220</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Uzavretie úlohy</label>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>closure_state</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>3</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>desc</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>4</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>2</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="cancel">
			<id>17_cancel</id>
			<actions phase="pre">
				<action>
					closureState: f.closure_state,
					closureDesc: f.desc,
					lastId: f.last_car_select;
					
					change closureState value {
						null
					}	
					change closureDesc value {
						null
					}					
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>17_finish</id>
			<actions phase="post">
				<action>
					status: f.status,
					closeDate: f.close_date;
					
					change closeDate value {
						java.time.LocalDate.now()
					}

					change status value{
						"Uzavretá"
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>18</id>
		<x>860</x>
		<y>300</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Znovuotvorenie úlohy</label>
		<assignPolicy>auto</assignPolicy>
		<event type="finish">
			<id>18_finish</id>
			<actions phase="pre">
				<action>
					closureState: f.closure_state,	
					closeDate: f.close_date,
					closureDesc: f.desc,
					closedBy: f.closed_by;					
					
					change closureState value {	null }	
					change closeDate value { null }
					change closureDesc value { null }		
					change closedBy value {	null }				
				</action>
			</actions>
			<actions phase="post">
				<action>
					status: f.status;	

					change status value{
						"Znovuotvorená"
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>24</id>
		<x>700</x>
		<y>500</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vytvorenie servisného záznamu</label>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_2</id>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>2</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>assignee</id>
				<logic>
					<behavior>visible</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>DataGroup_1</id>
			<dataRef>
				<id>car_list</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
					<action trigger="set">		
						carList: f.this,
						lastId: f.last_car_select,
						description: f.task,
						taskRef: f.service_creation;
						
						if(lastId.value != null){
							def refedTask = findTask( {it._id.eq(lastId.value)} )
							if(refedTask != null){
								cancelTask(refedTask)	
							}	
						}
						
						def refedTask = findTask( {it.caseId.eq(carList.value).and(it.transitionId.eq("20"))} )												
						
						if(refedTask != null){
							change taskRef value {
								[refedTask.stringId]
							}							
							assignTask(refedTask)	
							change lastId value{
								refedTask.stringId
							}						
							
							def carTaskData = getData(refedTask)
							if(carTaskData != null){
								def serviceTaskId = carTaskData.get("servis_creation").value[0]
								def serviceTask = findTask( {it._id.eq(serviceTaskId)} )							
								
								if(serviceTask != null){
									setData(serviceTask, [
										"task": [
											"value": description.value,
											"type" : "text"
										],
										"parent_task_id": [
											"value": useCase.stringId,
											"type" : "text"
										],
									])
								}									
							}
						}
					</action>
					<action trigger="get">		
						carList: f.this;

						def carInstances = findCases( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_carr").and(it.dataSet.get("status").value.eq("Aktívny"))} ) //todo change carr to car
						def carInstancesMap = carInstances.collectEntries {
							String value;
							
							if((it.getFieldValue("car_name") != null).and(!it.getFieldValue("car_name")?.isEmpty())){
								value = it.getFieldValue("plate_number") + " - " + it.getFieldValue("car_name") + " - " + it.getFieldValue("brand") + " " + it.getFieldValue("model")
							}
							else {
								value = it.getFieldValue("plate_number") + " - " + it.getFieldValue("brand") + " " + it.getFieldValue("model")
							}
							
							[(it.stringId): value]
						}
						
						change carList options{
							carInstancesMap
						}
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>service_creation</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="cancel">
			<id>24_cancel</id>
			<actions phase="pre">
				<action>
					taskRef: f.service_creation,
					carList: f.car_list,
					lastId: f.last_car_select;
					
					if((taskRef.value != null).and(taskRef.value != [])){
						def toCancel = findTask({it._id.eq(new org.bson.types.ObjectId(taskRef.value[0] as String))});		
						
						if(toCancel != null){
							change lastId value {
								null
							}						
							change carList value {
								[]
							}
							
							cancelTask(toCancel);
							
							change taskRef value {
								[]
							}
						}	
					}							
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>24_finish</id>
			<actions phase="pre">
				<action>
					closeDate: f.close_date,
					status: f.status,
					closureState: f.closure_state,
					taskRef: f.service_creation,
					carList: f.car_list,
					lastId: f.last_car_select;
					
					if((taskRef.value != null).and(taskRef.value != [])){
						def toFinish = findTask( {it._id.eq(taskRef.value[0])} );	
						
						if(toFinish != null){
							change lastId value {
								null
							}						
							change carList value {
								[]
							}
							
							finishTask(toFinish);
							
							change status value{
								"Uzavretá"
							}
							
							change closeDate value {
								java.time.LocalDate.now()
							}
							
							change closureState value{
								closureState.choices[2]
							}
						
							change taskRef value {
								[]
							}
						}
					}						
				</action>
			</actions>
		</event>
	</transition>
	<!-- PLACES -->
	<place>
		<id>1</id>
		<x>380</x>
		<y>300</y>
		<label>init</label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>3</id>
		<x>540</x>
		<y>180</y>
		<label>Úloha existuje</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>4</id>
		<x>700</x>
		<y>300</y>
		<label>Úloha je aktívna</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>11</id>
		<x>740</x>
		<y>100</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>16</id>
		<x>1060</x>
		<y>300</y>
		<label>Úloha je uzavretá</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>26</id>
		<x>860</x>
		<y>420</y>
		<label>Úloha je otvorená v serv. zázname</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>5</id>
		<type>regular</type>
		<sourceId>1</sourceId>
		<destinationId>2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>6</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>7</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>12</id>
		<type>regular</type>
		<sourceId>3</sourceId>
		<destinationId>10</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>13</id>
		<type>regular</type>
		<sourceId>10</sourceId>
		<destinationId>11</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>15</id>
		<type>read</type>
		<sourceId>3</sourceId>
		<destinationId>8</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>19</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>17</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>20</id>
		<type>regular</type>
		<sourceId>17</sourceId>
		<destinationId>16</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>23</id>
		<type>read</type>
		<sourceId>4</sourceId>
		<destinationId>9</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>25</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>24</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>28</id>
		<type>inhibitor</type>
		<sourceId>26</sourceId>
		<destinationId>18</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>30</id>
		<type>regular</type>
		<sourceId>16</sourceId>
		<destinationId>18</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>31</id>
		<type>regular</type>
		<sourceId>18</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>32</id>
		<type>regular</type>
		<sourceId>24</sourceId>
		<destinationId>26</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>33</id>
		<type>regular</type>
		<sourceId>24</sourceId>
		<destinationId>16</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>1060</x><y>500</y></breakPoint>
	</arc>
</document>
